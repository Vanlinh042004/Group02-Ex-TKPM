import mongoose from "mongoose";
import Class from "../models/Class";
import Course from "../../course/models/Course";
import { connect } from "../../../config/database";
import logger from "../../../utils/logger";
import dotenv from "dotenv";

dotenv.config();

/**
 * T·∫°o d·ªØ li·ªáu m·∫´u cho c√°c l·ªõp h·ªçc
 */
const seedClasses = async () => {
  try {
    // K·∫øt n·ªëi ƒë·∫øn database
    await mongoose.connect(process.env.MONGODB_URI || "");
    console.log("üîó Connected to MongoDB");

    // Ki·ªÉm tra n·∫øu ƒë√£ c√≥ d·ªØ li·ªáu trong collection
    const classCount = await Class.countDocuments();
    if (classCount > 0) {
      console.log("Classes already seeded.");
      return;
    }

    // L·∫•y danh s√°ch kh√≥a h·ªçc active
    const courses = await Course.find({ isActive: true });

    if (courses.length === 0) {
      console.log("No active courses found. Please run course seed first.");
      return;
    }

    // T·∫°o m·∫£ng c√°c h·ªçc k·ª≥
    const semesters = ["1", "2", "3"]; // 1, 2, H√®

    // T·∫°o m·∫£ng c√°c ph√≤ng h·ªçc
    const classrooms = [
      "B11",
      "B12",
      "B13",
      "B21",
      "B22",
      "B23",
      "C11",
      "C12",
      "C13",
      "C21",
      "C22",
      "C23",
    ];

    // T·∫°o m·∫£ng c√°c khung gi·ªù h·ªçc
    const schedules = [
      "Th·ª© 2 (7:30-9:30)",
      "Th·ª© 2 (9:45-11:45)",
      "Th·ª© 2 (13:00-15:00)",
      "Th·ª© 2 (15:15-17:15)",
      "Th·ª© 3 (7:30-9:30)",
      "Th·ª© 3 (9:45-11:45)",
      "Th·ª© 3 (13:00-15:00)",
      "Th·ª© 3 (15:15-17:15)",
      "Th·ª© 4 (7:30-9:30)",
      "Th·ª© 4 (9:45-11:45)",
      "Th·ª© 4 (13:00-15:00)",
      "Th·ª© 4 (15:15-17:15)",
      "Th·ª© 5 (7:30-9:30)",
      "Th·ª© 5 (9:45-11:45)",
      "Th·ª© 5 (13:00-15:00)",
      "Th·ª© 5 (15:15-17:15)",
      "Th·ª© 6 (7:30-9:30)",
      "Th·ª© 6 (9:45-11:45)",
      "Th·ª© 6 (13:00-15:00)",
      "Th·ª© 6 (15:15-17:15)",
      "Th·ª© 7 (7:30-9:30)",
      "Th·ª© 7 (9:45-11:45)",
    ];

    // T·∫°o m·∫£ng t√™n c√°c gi·∫£ng vi√™n
    const instructors = [
      "TS. Nguy·ªÖn VƒÉn A",
      "PGS. TS. Tr·∫ßn Th·ªã B",
      "TS. L√™ VƒÉn C",
      "ThS. Ph·∫°m Th·ªã D",
      "PGS. TS. Ho√†ng VƒÉn E",
      "GS. TS. V≈© Th·ªã F",
      "TS. ƒê·∫∑ng VƒÉn G",
      "ThS. B√πi Th·ªã H",
    ];

    // T·∫°o c√°c l·ªõp h·ªçc cho nƒÉm h·ªçc hi·ªán t·∫°i
    const currentYear = new Date().getFullYear();
    const academicYear = `${currentYear}-${currentYear + 1}`;

    const classes = [];
    let classIndex = 1;

    // M·ªói kh√≥a h·ªçc s·∫Ω m·ªü 1-3 l·ªõp cho m·ªói h·ªçc k·ª≥
    for (const course of courses) {
      // ƒê·ªëi v·ªõi m·ªói h·ªçc k·ª≥ trong nƒÉm
      for (const semester of semesters) {
        // S·ªë l·ªõp ng·∫´u nhi√™n t·ª´ 1-3
        const numClasses = Math.floor(Math.random() * 3) + 1;

        for (let i = 0; i < numClasses; i++) {
          // T·∫°o m√£ l·ªõp h·ªçc d·∫°ng: [m√£ m√¥n h·ªçc]-[h·ªçc k·ª≥][s·ªë th·ª© t·ª±]
          const classId = `${course.courseId}-${semester}${i + 1}`;

          // Ch·ªçn ng·∫´u nhi√™n ph√≤ng h·ªçc, l·ªãch h·ªçc v√† gi·∫£ng vi√™n
          const randomClassroom =
            classrooms[Math.floor(Math.random() * classrooms.length)];
          const randomSchedule =
            schedules[Math.floor(Math.random() * schedules.length)];
          const randomInstructor =
            instructors[Math.floor(Math.random() * instructors.length)];

          // S·ªë l∆∞·ª£ng sinh vi√™n t·ªëi ƒëa t·ª´ 30-70
          const maxStudents = Math.floor(Math.random() * 41) + 30;

          classes.push({
            classId,
            course: course._id,
            academicYear,
            semester,
            instructor: randomInstructor,
            maxStudents,
            schedule: randomSchedule,
            classroom: randomClassroom,
          });

          classIndex++;
        }
      }
    }

    console.log(`Creating ${classes.length} classes...`);
    await Class.insertMany(classes);

    console.log("‚úÖ Seeded classes successfully");
  } catch (error) {
    console.error("Error seeding classes:", error);
  } finally {
    // ƒê√≥ng k·∫øt n·ªëi
    await mongoose.connection.close();
    console.log("üîå Disconnected from MongoDB");
  }
};

export default seedClasses;
