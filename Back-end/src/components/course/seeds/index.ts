import mongoose from "mongoose";
import Course from "../models/Course";
import Faculty from "../../faculty/models/Faculty";
import { connect } from "../../../config/database";
import logger from "../../../utils/logger";
import dotenv from "dotenv";

dotenv.config();

/**
 * T·∫°o d·ªØ li·ªáu m·∫´u cho kh√≥a h·ªçc
 */
const seedCourses = async () => {
  try {
    // K·∫øt n·ªëi ƒë·∫øn database
    await mongoose.connect(process.env.MONGODB_URI || "");
    console.log("üîó Connected to MongoDB");

    // Ki·ªÉm tra n·∫øu ƒë√£ c√≥ d·ªØ li·ªáu trong collection
    const courseCount = await Course.countDocuments();
    if (courseCount > 0) {
      console.log("Courses already seeded.");
      return;
    }

    // L·∫•y danh s√°ch khoa
    const faculties = await Faculty.find({});

    if (faculties.length === 0) {
      console.log("No faculties found. Please run faculty seed first.");
      return;
    }

    // L·ª±a ch·ªçn m·ªôt s·ªë khoa ph·ªï bi·∫øn ƒë·ªÉ g√°n cho c√°c kh√≥a h·ªçc
    const csFaculty =
      faculties.find((f) => f.name["vi"]?.includes("CNTT")) || faculties[0];
    const mathFaculty =
      faculties.find((f) => f.name["vi"]?.includes("To√°n")) ||
      faculties[1] ||
      faculties[0];
    const physicsFaculty =
      faculties.find((f) => f.name["vi"]?.includes("L√Ω")) ||
      faculties[2] ||
      faculties[0];
    const englishFaculty =
      faculties.find((f) => f.name["vi"]?.includes("Anh")) ||
      faculties[3] ||
      faculties[0];

    // T·∫°o c√°c kh√≥a h·ªçc c∆° b·∫£n kh√¥ng c√≥ m√¥n ti√™n quy·∫øt
    const baseCourses = [
      {
        courseId: "CSC10001",
        name: {
          vi: "Nh·∫≠p m√¥n l·∫≠p tr√¨nh",
          en: "Introduction to Programming",
        },
        credits: 4,
        faculty: csFaculty._id,
        description: {
          vi: "Gi·ªõi thi·ªáu v·ªÅ l·∫≠p tr√¨nh c∆° b·∫£n v√† ng√¥n ng·ªØ C++.",
          en: "Introduce the basic of programming and C++ language.",
        },
        isActive: true,
        createdAt: new Date(Date.now() - 100 * 24 * 60 * 60 * 1000), // 100 ng√†y tr∆∞·ªõc
      },
      {
        courseId: "MTH10001",
        name: {
          vi: "Gi·∫£i t√≠ch 1",
          en: "Calculus 1",
        },
        credits: 4,
        faculty: mathFaculty._id,
        description: {
          vi: "Nh·∫≠p m√¥n gi·∫£i t√≠ch to√°n h·ªçc.",
          en: "Introduction to basic calculus.",
        },
        isActive: true,
        createdAt: new Date(Date.now() - 95 * 24 * 60 * 60 * 1000), // 95 ng√†y tr∆∞·ªõc
      },
      {
        courseId: "PHY10001",
        name: {
          vi: "V·∫≠t l√Ω ƒë·∫°i c∆∞∆°ng 1",
          en: "General Physics 1",
        },
        credits: 3,
        faculty: physicsFaculty._id,
        description: {
          vi: "C∆° s·ªü v·∫≠t l√Ω c∆° h·ªçc v√† nhi·ªát h·ªçc.",
          en: "Physics foundation in mechanics and thermodynamics",
        },
        isActive: true,
        createdAt: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000), // 90 ng√†y tr∆∞·ªõc
      },
      {
        courseId: "ENG10001",
        name: {
          vi: "Ti·∫øng Anh h·ªçc thu·∫≠t",
          en: "Academic English",
        },
        credits: 3,
        faculty: englishFaculty._id,
        description: {
          vi: "Ti·∫øng Anh cho sinh vi√™n ƒë·∫°i h·ªçc.",
          en: "English for undergraduates."
        },
        isActive: true,
        createdAt: new Date(Date.now() - 85 * 24 * 60 * 60 * 1000), // 85 ng√†y tr∆∞·ªõc
      },
    ];

    // L∆∞u c√°c kh√≥a h·ªçc c∆° b·∫£n
    console.log("Creating base courses...");
    const savedBaseCourses = await Course.insertMany(baseCourses);

    // L·∫•y ID c·ªßa c√°c kh√≥a h·ªçc c∆° b·∫£n ƒë·ªÉ l√†m ƒëi·ªÅu ki·ªán ti√™n quy·∫øt
    const csIntroId = savedBaseCourses.find(
      (c) => c.courseId === "CSC10001"
    )?._id;
    const calculus1Id = savedBaseCourses.find(
      (c) => c.courseId === "MTH10001"
    )?._id;
    const physics1Id = savedBaseCourses.find(
      (c) => c.courseId === "PHY10001"
    )?._id;

    // T·∫°o c√°c kh√≥a h·ªçc n√¢ng cao c√≥ m√¥n ti√™n quy·∫øt
    const advancedCourses = [
      {
        courseId: "CSC10002",
        name: {
          vi: "C·∫•u tr√∫c d·ªØ li·ªáu v√† gi·∫£i thu·∫≠t",
          en: "Data Structures and Algorithms"
        },
        credits: 4,
        faculty: csFaculty._id,
        description: {
          vi: "H·ªçc v·ªÅ c√°c c·∫•u tr√∫c d·ªØ li·ªáu v√† thi·∫øt k·∫ø gi·∫£i thu·∫≠t.",
          en: "Study of data structures and algorithm design."
        },
        prerequisites: [csIntroId],
        isActive: true,
        createdAt: new Date(Date.now() - 80 * 24 * 60 * 60 * 1000),
      },
      {
        courseId: "MTH10002",
        name: {
          vi: "Gi·∫£i t√≠ch 2",
          en: "Calculus 2"
        },
        credits: 4,
        faculty: mathFaculty._id,
        description: {
          vi: "Ph·∫ßn n√¢ng cao c·ªßa gi·∫£i t√≠ch to√°n h·ªçc.",
          en: "Advanced topics in calculus."
        },
        prerequisites: [calculus1Id],
        isActive: true,
        createdAt: new Date(Date.now() - 75 * 24 * 60 * 60 * 1000),
      },
      {
        courseId: "PHY10002",
        name: {
          vi: "V·∫≠t l√Ω ƒë·∫°i c∆∞∆°ng 2",
          en: "General Physics 2"
        },
        credits: 3,
        faculty: physicsFaculty._id,
        description: {
          vi: "C∆° s·ªü ƒëi·ªán t·ª´ h·ªçc v√† quang h·ªçc.",
          en: "Foundations of electromagnetism and optics."
        },
        prerequisites: [physics1Id],
        isActive: true,
        createdAt: new Date(Date.now() - 70 * 24 * 60 * 60 * 1000),
      },
      {
        courseId: "CSC20001",
        name: {
          vi: "L·∫≠p tr√¨nh h∆∞·ªõng ƒë·ªëi t∆∞·ª£ng",
          en: "Object-Oriented Programming"
        },
        credits: 4,
        faculty: csFaculty._id,
        description: {
          vi: "Nguy√™n l√Ω v√† k·ªπ thu·∫≠t l·∫≠p tr√¨nh h∆∞·ªõng ƒë·ªëi t∆∞·ª£ng.",
          en: "Principles and techniques of object-oriented programming."
        },
        prerequisites: [csIntroId],
        isActive: true,
        createdAt: new Date(Date.now() - 65 * 24 * 60 * 60 * 1000),
      },
    ];

    console.log("Creating advanced courses...");
    const savedAdvancedCourses = await Course.insertMany(advancedCourses);

    // L·∫•y ID cho m√¥n h·ªçc n√¢ng cao ƒë·ªÉ l√†m ƒëi·ªÅu ki·ªán ti√™n quy·∫øt cho c√°c m√¥n c·∫•p cao h∆°n
    const dataStructureId = savedAdvancedCourses.find(
      (c) => c.courseId === "CSC10002"
    )?._id;
    const oopId = savedAdvancedCourses.find(
      (c) => c.courseId === "CSC20001"
    )?._id;

    // T·∫°o c√°c kh√≥a h·ªçc c·∫•p cao h∆°n c√≥ nhi·ªÅu m√¥n ti√™n quy·∫øt
    const highLevelCourses = [
      {
        courseId: "CSC30001",
        name: {
          vi: "Ph√°t tri·ªÉn ·ª©ng d·ª•ng web",
          en: "Web Application Development"
        },
        credits: 3,
        faculty: csFaculty._id,
        description: {
          vi: "H·ªçc ph√°t tri·ªÉn ·ª©ng d·ª•ng web s·ª≠ d·ª•ng c√¥ng ngh·ªá hi·ªán ƒë·∫°i.",
          en: "Learn web application development using modern technologies."
        },
        prerequisites: [dataStructureId, oopId],
        isActive: true,
        createdAt: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000),
      },
      {
        courseId: "CSC30002",
        name: {
          vi: "Tr√≠ tu·ªá nh√¢n t·∫°o",
          en: "Artificial Intelligence"
        },
        credits: 3,
        faculty: csFaculty._id,
        description: {
          vi: "Gi·ªõi thi·ªáu c√°c k·ªπ thu·∫≠t v√† thu·∫≠t to√°n tr√≠ tu·ªá nh√¢n t·∫°o.",
          en: "Introduction to artificial intelligence techniques and algorithms."
        },
        prerequisites: [dataStructureId, calculus1Id],
        isActive: true,
        createdAt: new Date(Date.now() - 55 * 24 * 60 * 60 * 1000),
      },
      {
        courseId: "CSC30003",
        name: {
          vi: "H·ªçc m√°y",
          en: "Machine Learning"
        },
        credits: 3,
        faculty: csFaculty._id,
        description: {
          vi: "Gi·ªõi thi·ªáu v·ªÅ c√°c k·ªπ thu·∫≠t h·ªçc m√°y.",
          en: "Introduction to machine learning techniques."
        },
        prerequisites: [dataStructureId, calculus1Id],
        isActive: true,
        createdAt: new Date(Date.now() - 50 * 24 * 60 * 60 * 1000),
      },
    ];

    console.log("Creating high level courses...");
    await Course.insertMany(highLevelCourses);

    // T·∫°o m·ªôt kh√≥a h·ªçc ƒë√£ b·ªã deactivate
    const deactivatedCourse = {
      courseId: "CSC10005",
      name: {
        vi: "L·∫≠p tr√¨nh Pascal (C≈©)",
        en: "Pascal Programming (Old)"
      },
      credits: 3,
      faculty: csFaculty._id,
      description: {
        vi: "M√¥n h·ªçc ƒë√£ kh√¥ng c√≤n ƒë∆∞·ª£c gi·∫£ng d·∫°y.",
        en: "This course is no longer taught."
      },
      isActive: false,
      createdAt: new Date(Date.now() - 200 * 24 * 60 * 60 * 1000),
    };

    console.log("Creating deactivated course...");
    await Course.create(deactivatedCourse);

    // T·∫°o m·ªôt kh√≥a h·ªçc m·ªõi (d∆∞·ªõi 30 ph√∫t)
    const newCourse = {
      courseId: "CSC40001",
      name: {
        vi: "Blockchain v√† ·ª©ng d·ª•ng",
        en: "Blockchain and Applications"
      },
      credits: 3,
      faculty: csFaculty._id,
      description: {
        vi: "Gi·ªõi thi·ªáu v·ªÅ c√¥ng ngh·ªá blockchain v√† c√°c ·ª©ng d·ª•ng.",
        en: "Introduction to blockchain technology and its applications."
      },
      isActive: true,
      createdAt: new Date(),
    };

    console.log("Creating new course (for deletion test)...");
    await Course.create(newCourse);

    console.log("‚úÖ Seeded courses successfully");
  } catch (error) {
    console.error("Error seeding courses:", error);
  } finally {
    // ƒê√≥ng k·∫øt n·ªëi
    await mongoose.connection.close();
    console.log("üîå Disconnected from MongoDB");
  }
};

export default seedCourses;
